#!/bin/bash
# scritp para obtener la temperatura interna de la ups del rack

function usage()
{
cat <<END
  Usage: $0 -w NUM -c NUM [ -h ]
    -w: warning semaphore count
    -c: critical semaphore count
    -h: print this help
END
}


function is_num()
{
  printf %d $1 &>/dev/null
  return $?
}

#function bigger()
#{
#  op1="$1"
#  op2="$2"
#  res=$(echo "$op1 > $op2" | bc)
#  [ "$res" == "1" ] && return 0
#  return 1
#}

function smaller()
{
  op1="$1"
  op2="$2"
  res=$(echo "$op1 < $op2" | bc)
  [ "$res" == "1" ] && return 0
  return 1
}

OPS=$(getopt w:c:h:: "$@")

eval set -- "$OPS"

while true ; do
  case "$1" in
    -w) WARN=$2 ; shift 2 ;;
    -c) CRITIC=$2 ; shift 2 ;;
    -h) usage ; exit 0 ;;
    --) shift ; break ;;
  esac
done

# return values
# UNKNOWN = 3
# CRITICAL = 2
# WARNING = 1
# OK = 0

if [ "${WARN}x" == "x" -o  "${CRITIC}x" == "x" ] ; then
  echo "OS_SEM_COUNT UNKNOWN: Invalid -w nor -c arguments"
  exit 3
fi

if ! is_num "$WARN" || ! is_num "$CRITIC" ; then
  echo "OS_SEM_COUNT UNKNOWN: Invalid -w nor -c arguments"
  exit 3
fi

smaller "$CRITIC"  "$WARN" && {
  echo "OS_SEM_COUNT UNKNOWN: -c value smaller than -w"
  exit 3
}

sem_count=$(ipcs -s | grep ^0x | cut -f 1 -d\  | wc -l)


if [ $? -gt 0 ] ; then 
  echo "OS_SEM_COUNT UNKNOWN: error executing ipcs -s | grep ^0x | cut -f 1 -d\  | wc -l"
  exit 3
fi

smaller "$CRITIC"  "$sem_count"  && {
  echo "OS_SEM_COUNT CRITICAL: Count=$sem_count"
  exit 2
}

smaller "$WARN"  "$sem_count" && {
  echo "OS_SEM_COUNT WARNING: Count=$sem_count"
  exit 1
}

echo "OS_SEM_COUNT OK: Count=$sem_count"
exit 0

